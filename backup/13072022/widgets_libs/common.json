{
  "widgetsBundle": {
    "alias": "common",
    "title": "Common",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "common_widget_demo",
      "name": "common-widget-demo",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "https://github.com/dc-js/dc.graph.js",
            "isModule": false
          }
        ],
        "templateHtml": "",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n\n    var cssParser = new cssjs();\n    cssParser.testMode = false;\n    var namespace = 'html-card-' + hashCode(self.ctx.settings.cardCss);\n    cssParser.cssPreviewNamespace = namespace;\n    cssParser.createStyleElement(namespace, self.ctx.settings.cardCss);\n    self.ctx.$container.addClass(namespace);\n    var evtFnPrefix = 'htmlCard_' + Math.abs(hashCode(self.ctx.settings.cardCss + self.ctx.settings.cardHtml + self.ctx.widget.id));\n    cardHtml =  '<div style=\"height:100%\" onclick=\"' + evtFnPrefix + '_onClickFn(event)\">' + \n                self.ctx.settings.cardHtml + \n                '</div>';\n    self.ctx.$container.html(cardHtml);\n\n    window[evtFnPrefix + '_onClickFn'] = function (event) {\n        self.ctx.actionsApi.elementClick(event);\n    }\n\n    function hashCode(str) {\n        var hash = 0;\n        var i, char;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash;\n        }\n        return hash;\n    }\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #115;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\",\"cardHtml\":\"<div class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\r\\n  <img class=\\\"card-img-top\\\" src=\\\"...\\\" alt=\\\"Card image cap\\\">\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <h5 class=\\\"card-title\\\">Card title</h5>\\r\\n    <p class=\\\"card-text\\\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\\r\\n    <a href=\\\"#\\\" class=\\\"btn btn-primary\\\">Go somewhere</a>\\r\\n  </div>\\r\\n</div>\"},\"title\":\"common-widget-demo\",\"dropShadow\":true,\"datasources\":[],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "hoversidenavbuttonsmenu",
      "name": "HoverSidenavButtonsMenu",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"mySidenav\" class=\"sidenav\">\r\n  <a href=\"#\" id=\"first\">First</a>\r\n  <a href=\"#\" id=\"second\">Blog</a>\r\n  <a href=\"#\" id=\"third\">Projects</a>\r\n  <a href=\"#\" id=\"fourth\">Contact</a>\r\n</div>\r\n",
        "templateCss": "#mySidenav a {\r\n  position: absolute;\r\n  left: -80px;\r\n  transition: 0.3s;\r\n  padding: 15px;\r\n  width: 120px;\r\n  text-decoration: none;\r\n  font-size: 20px;\r\n  color: white;\r\n  border-radius: 0 5px 5px 0;\r\n}\r\n\r\n#mySidenav a:hover {\r\n  left: 0;\r\n}\r\n\r\n#first {\r\n  top: 20px;\r\n  background-color: #4CAF50;\r\n}\r\n\r\n#second {\r\n  top: 80px;\r\n  background-color: #2196F3;\r\n}\r\n\r\n#third {\r\n  top: 140px;\r\n  background-color: #f44336;\r\n}\r\n\r\n#fourth {\r\n  top: 200px;\r\n  background-color: #555\r\n}",
        "controllerScript": "self.onInit = function() \n{\n    var menu1Enable = self.ctx.settings.enableLink1;\n    var menu2Enable = self.ctx.settings.enableLink2;\n    var menu3Enable = self.ctx.settings.enableLink3;\n    var menu4Enable = self.ctx.settings.enableLink4;\n    var menu1Title = self.ctx.settings.content;\n    document.getElementById(\"first\").innerHTML = menu1Title;\n    if (menu1Enable === false)\n    {\n        document.getElementById(\"first\").style.visibility = \"hidden\";\n    }\n    var menu2Title = self.ctx.settings.content2;\n    document.getElementById(\"second\").innerHTML = menu2Title;\n    if (menu2Enable === false)\n    {\n        document.getElementById(\"second\").style.visibility = \"hidden\";\n    }\n    var menu3Title = self.ctx.settings.content3;\n    document.getElementById(\"third\").innerHTML = menu3Title;\n    if (menu3Enable === false)\n    {\n        document.getElementById(\"third\").style.visibility = \"hidden\";\n    }\n    var menu4Title = self.ctx.settings.content4;\n    document.getElementById(\"fourth\").innerHTML = menu4Title;\n    if (menu4Enable === false)\n    {\n        document.getElementById(\"fourth\").style.visibility = \"hidden\";\n    }    \n    var menu1Link = self.ctx.settings.link1;\n    var menu2Link = self.ctx.settings.link2;\n    var menu3Link = self.ctx.settings.link3;\n    var menu4Link = self.ctx.settings.link4;\n    \n    document.getElementById(\"first\").href = menu1Link;\n    document.getElementById(\"second\").href = menu2Link;\n    document.getElementById(\"third\").href = menu3Link;\n    document.getElementById(\"fourth\").href = menu4Link;\n    \n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"content\": {\n                \"title\": \"Menu 1 String\",\n                \"type\": \"string\",\n                \"default\": \"Menu Entry 1\"\n            },\n            \"content2\": {\n                \"title\": \"Menu 2 String\",\n                \"type\": \"string\",\n                \"default\": \"Menu Entry 2\"\n            },\n            \"content3\": {\n                \"title\": \"Menu 3 String\",\n                \"type\": \"string\",\n                \"default\": \"Menu Entry 3\"\n            },\n            \"content4\": {\n                \"title\": \"Menu 4 String\",\n                \"type\": \"string\",\n                \"default\": \"Menu Entry 4\"\n            },\n            \"link1\": {\n                \"title\": \"Static link 1\",\n                \"type\": \"string\",\n                \"default\": \"http://www.rossmann-engineering.de\"\n            },\n            \"link2\": {\n                \"title\": \"Static link 2\",\n                \"type\": \"string\",\n                \"default\": \"http://www.rossmann-engineering.de\"\n            },\n            \"link3\": {\n                \"title\": \"Static link 3\",\n                \"type\": \"string\",\n                \"default\": \"http://www.rossmann-engineering.de\"\n            },\n            \"link4\": {\n                \"title\": \"Static link 4\",\n                \"type\": \"string\",\n                \"default\": \"http://www.rossmann-engineering.de\"\n            },\n            \"enableLink1\": {\n                \"title\": \"Enable link 1\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"enableLink2\": {\n                \"title\": \"Enable link 2\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"enableLink3\": {\n                \"title\": \"Enable link 3\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"enableLink4\": {\n                \"title\": \"Enable link 4\",\n                \"type\": \"boolean\",\n                \"default\": false\n            }\n        }\n    }\n}\n",
        "dataKeySettingsSchema": "",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"content\":\"Menu entry 1\",\"content2\":\"Menu entry 2\",\"content3\":\"Menu entry 3\",\"content4\":\"Menu entry 4\",\"link1\":\"http://www.rossmann-engineering.de\",\"link2\":\"http://www.rossmann-engineering.de\",\"link3\":\"http://www.rossmann-engineering.de\",\"link4\":\"http://www.rossmann-engineering.de\",\"enableLink1\":true,\"enableLink2\":false},\"title\":\"HoverSidenavButtonsMenu\",\"dropShadow\":true,\"datasources\":[],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "toggle_button_1",
      "name": "Toggle Button 1",
      "descriptor": {
        "type": "rpc",
        "sizeX": 5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<div class=\"switch\">\r\n\t<input type=\"checkbox\" id=\"switch\" name=\"switch\" >\r\n\t<label></label>\r\n</div> ",
        "templateCss": ".switch input {\r\n    /* First, we make it as wide as the container */\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    /* Then, we put it on top of everything else */\r\n    z-index: 100;\r\n    /* Last, we make it invisible */\r\n    opacity: 0;\r\n    /* This one is just for ergonomy */\r\n    cursor: pointer;\r\n}\r\n\r\n.switch {\r\n    width: 100px;\r\n    height: 100px;\r\n   \r\n    \r\n    top: 50%;\r\n     transform: translate(-50%, -50%);\r\n    position: absolute;\r\n  left: 50%;\r\n}\r\n\r\n.switch label {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    border-radius: 50%;\r\n    background: #eaeaea;\r\n    box-shadow: \r\n        0 3px 5px rgba(0,0,0,0.25),\r\n        inset 0 1px 0 rgba(255,255,255,255),\r\n        inset 0 -5px 5px rgba(100,100,100,255),\r\n        inset 0 5px 5px rgba(255,255,255,255);\r\n}\r\n\r\n.switch label:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    z-index: -1;\r\n    top: -8%; \r\n    right: -8%; \r\n    bottom: -8%; \r\n    left: -8%;\r\n    border-radius: inherit;\r\n    background: #ddd; /* Fallback */\r\n    background: linear-gradient(#ffff, #000);\r\n    box-shadow: \r\n        inset 0 2px 1px rgba(255,255,255,0.15),\r\n        0 2px 5px rgba(200,200,200,0.1);\r\n}\r\n\r\n.switch label:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 20%;\r\n    height: 20%; \r\n    left: 40%;\r\n    top: 40%;\r\n    border-radius: inherit;\r\n    background: #969696; /* Fallback */\r\n    background: radial-gradient(40% 35%, #ccc, #969696 60%);\r\n    box-shadow:\r\n        inset 0 2px 4px 1px rgba(0,0,0,0.3),\r\n        0 1px 0 rgba(255,255,255,1),\r\n        inset 0 1px 0 white;\r\n}\r\n\r\n.switch input:checked ~ label { /* Button */\r\n\tbackground: #e5e5e5; /* Fallback */\r\n    background: linear-gradient(#dedede, #fdfdfd);\r\n}\r\n\r\n.switch input:checked ~ label:before { /* LED */\r\n    background: #25d025; /* Fallback */\r\n    background: radial-gradient(40% 35%, #5aef5a, #25d025 60%);\r\n    box-shadow:\r\n        inset 0 3px 5px 1px rgba(0,0,0,0.1),\r\n        0 1px 0 rgba(255,255,255,0.4),\r\n        0 0 10px 2px rgba(0, 210, 0, 0.5);\r\n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    \n    //Set Value Mathod\n    var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n    \n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n   \n    function requestStatus() {\n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        method = \"linhnv10\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                       let value = (convertGetValue(responseBody));   \n                       console.log (value);\n                       if (value == true)\n                       {\n\n                       $('#switch', self.ctx.$container).click();\n                       \n                       }\n                        else\n                        {\n                        \n\n                        \n                        }\n                    }\n                    );\n                }\n                \n   \n                \n\n    requestStatus()\n    \n    \n    $('#switch', self.ctx.$container).click(function(e){\n  //var method = settings.changeRequestMethod || 'setValue';\n        var method = \"\";\n        let checked = $('#switch', self.ctx.$container)[0].checked;\n        console.log(checked);\n        var paramsBody = convertStatus(checked);\n        console.log(method);\n        console.log(paramsBody);\n        method = \"linhnv10\";\n        paramsBody = {\"cmd\":1,\"WoId\":5001,\"LOT\":2000,\"MachineId\":\"Wave01\",\"alter\":0};\n        self.ctx.controlApi.sendOneWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    /*.subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );*/\n});\n    self.onResize();\n    \n}\n\n\n\nself.onResize = function() {\n    if (self.ctx.width > self.ctx.height)\n        $('.switch', self.ctx.$container)[0].style.zoom = self.ctx.height / 150;\n    else\n        $('.switch', self.ctx.$container)[0].style.zoom = self.ctx.width / 150;\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            } ,\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n        },\n        \"required\": [ \n                     \"requestTimeout\",\n                     \"changeRequestMethod\",\n                     \"statusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"convertStatusRequestMethod\"\n                    ]\n    },\n    \"form\": [\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\"\n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Toggle Button 1\"}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "slider",
      "name": "Slider",
      "descriptor": {
        "type": "rpc",
        "sizeX": 8.5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<style data=\"test\" type=\"text/css\"></style>\n\n\n<div class=\"slidecontainer\">\n    <div id=\"value_label\">40%</div>\n  <input type=\"range\" min=\"1\" max=\"100\" step=\"1\" value=\"50\" class=\"slider\" id=\"myRange\">\n</div>",
        "templateCss": "\n#container {\n\n  background-position: 50% 50%;\n \n}\n\n#value_label{\n    position: absolute;\n    top: 40px;\n}\n\n.slidecontainer {\n    \n margin: auto;\n  width: 90%; /* Width of the outside container */\n  margin-left: 5%;\n\n}\n\n/* The slider itself */\n.slider {\n  -webkit-appearance: none;  /* Override default CSS styles */\n  appearance: none;\n  width: 100%; /* Full-width */\n  height: 25px; /* Specified height */\n  background: #d3d3d3; /* Grey background */\n  border-radius: 5px;\n  outline: none; /* Remove outline */\n  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */\n  -webkit-transition: .2s; /* 0.2 seconds transition on hover */\n  transition: opacity .2s;\n}\n\n/* The slider itself */\n.slider_round {\n  -webkit-appearance: none;  /* Override default CSS styles */\n  appearance: none;\n  width: 100%; /* Full-width */\n  height: 25px; /* Specified height */\n  background: #d3d3d3; /* Grey background */\n  border-radius: 5px;\n  outline: none; /* Remove outline */\n  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */\n  -webkit-transition: .2s; /* 0.2 seconds transition on hover */\n  transition: opacity .2s;\n}\n\n/* Mouse-over effects */\n.slider:hover {\n  opacity: 1; /* Fully shown on mouse-over */\n}\n\n/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */ \n.slider::-webkit-slider-thumb {\n  -webkit-appearance: none; /* Override default look */\n  appearance: none;\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n\n  cursor: pointer; /* Cursor on hover */\n}\n\n.slider::-moz-range-thumb {\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n  cursor: pointer; /* Cursor on hover */\n}\n\n/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */ \n.slider_round::-webkit-slider-thumb {\n  -webkit-appearance: none; /* Override default look */\n  appearance: none;\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n    border-radius: 50%;\n  cursor: pointer; /* Cursor on hover */\n}\n\n.slider_round::-moz-range-thumb {\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n  border-radius: 50%;\n  cursor: pointer; /* Cursor on hover */\n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nvar style = document.querySelector('[data=\"test\"]');\n\nself.onInit = function() {\n    \n\n \n      \n    var settings = self.ctx.settings;\n   \n    var slider = $('#myRange', self.ctx.$container)[0]\n    \n    if (settings.style == 'Round')\n        $('#myRange', self.ctx.$container).removeClass('slider').addClass('slider_round');\n    \n    \n    slider.min = settings.sliderMinValue;\n    slider.max = settings.sliderMaxValue;\n    slider.step = settings.sliderStepWidth;\n   slider.style.background = settings.sliderbgColor;\n    \n    function requestStatus() {\n    method = settings.sliderStatusRequestMethod;\n    paramsBody = \"\";\n    self.ctx.controlApi.sendTwoWayCommand(method, \n                        paramsBody, \n                        settings.requestTimeout)\n        .subscribe(\n            function success(responseBody) {\n                   slider.value = parseFloat(responseBody);    \n                   self.onResize();\n                }\n                );\n            }\n    \n    requestStatus();\n    self.onResize();\n    \n    slider.oninput = function() {\n        let sliderWidth = $('#myRange', self.ctx.$container)[0].offsetWidth;\n       \n        let margin = self.ctx.width - sliderWidth;\n        $('#value_label', self.ctx.$container)[0].style.left = (sliderWidth) * slider.value/settings.sliderMaxValue + margin/2 - 20 + \"px\";\n        if (settings.showValue)\n            $('#value_label', self.ctx.$container)[0].innerHTML = slider.value;\n        else\n            $('#value_label', self.ctx.$container)[0].innerHTML = '';\n        \n        \n        \n    }\n    \n    slider.onchange = function() {\n        var method = settings.sliderChangeRequestMethod;\n        \n        var paramsBody = slider.value;\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n}\n\n}\n\n\n\nself.onResize = function() {\n    var slider = $('#myRange', self.ctx.$container)[0]\n    var settings = self.ctx.settings;\n    \n    $('#myRange', self.ctx.$container)[0].style.marginTop = self.ctx.height / 2 - $('#myRange', self.ctx.$container)[0].offsetHeight / 2 -  $('#value_label', self.ctx.$container)[0].offsetHeight/2 + \"px\";\n\n    $('#value_label', self.ctx.$container)[0].style.top = self.ctx.height / 2 - $('#myRange', self.ctx.$container)[0].offsetHeight -  $('#value_label', self.ctx.$container)[0].offsetHeight + \"px\";\n    \n    let sliderWidth = $('#myRange', self.ctx.$container)[0].offsetWidth;\n    let margin = self.ctx.width - sliderWidth;\n\n    $('#value_label', self.ctx.$container)[0].style.left = (sliderWidth) * slider.value/settings.sliderMaxValue + margin/2 - 20 + \"px\";\n    if (settings.showValue)\n    $('#value_label', self.ctx.$container)[0].innerHTML = slider.value;\n    else\n            $('#value_label', self.ctx.$container)[0].innerHTML = '';\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"sliderbgColor\": {\n                \"title\": \"Slider Background Color\",\n                \"type\": \"string\",\n                \"default\": \"#4CAF50\"\n            },\n            \"showValue\": {\n                \"title\": \"Show Value\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"sliderMinValue\": {\n                \"title\": \"Min. Value\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderMaxValue\": {\n                \"title\": \"Max. Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"sliderStepWidth\": {\n                \"title\": \"Step Width\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"style\": {\n                \"title\": \"Slider handle style\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Round\",\n                    \"Rectangle\"],\n                \"default\": \"Round\"\n            },\n            \"sliderChangeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"sliderStatusRequestMethod\": {\n                \"title\": \"Status request Method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"sliderbgColor\",\n                     \"showValue\",\n                     \"sliderMinValue\",\n                     \"sliderMaxValue\",\n                     \"sliderChangeRequestMethod\",\n                     \"sliderStatusRequestMethod\"\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        {\n            \"key\": \"sliderbgColor\",\n            \"type\": \"color\"\n        },\n        \"showValue\",\n        \"sliderMinValue\",\n        \"sliderMaxValue\",\n        \"style\",\n        \"sliderStepWidth\",\n        \"sliderChangeRequestMethod\",\n        \"sliderStatusRequestMethod\"\n        \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Slider\",\"targetDeviceAliases\":[]}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "chart_12",
      "name": "chart_linh01",
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 7.5,
        "resources": [
          {
            "url": "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.min.js"
          }
        ],
        "templateHtml": "<!--div><canvas id=\"pieChart\"></canvas></div-->\n<div><canvas id=\"pieChart1\"></canvas></div>\n",
        "templateCss": "#container {\n    \n    --strokecolor1: yellow;\n    --strokecolor2: red;\n    --strokecolor3: green;\n    --strokecolor4: blue;\n    --strokecolor5: cyan;\n    --strokecolor6: purple;\n    --strokecolor7: red;\n    --strokecolor8: black;\n    --strokecolor9: yellow;\n    --strokecolor10: black;\n    --strokewidth1: 3px;\n    --strokewidth2: 3px;\n    --strokewidth3: 3px;\n    --strokewidth4: 3px;\n    --strokewidth5: 3px;\n    --strokewidth6: 3px;\n    --strokewidth7: 3px;\n    --strokewidth8: 3px;\n    --strokewidth9: 3px;\n    --strokewidth10: 3px;\n    --fill1: none;\n    --fill2: none;\n    --fill3: none;\n    --fill4: none;\n    --fill5: none;\n    --fill6: none;\n    --fill7: none;\n    --fill8: none;\n    --fill9: none;\n    --fill10: none;\n    --pointcolor1: transparent;\n    --pointcolor2: transparent;\n    --pointcolor3: transparent;\n    --pointcolor4: transparent;\n    --pointcolor5: transparent;\n    --pointcolor6: transparent;\n    --pointcolor7: transparent;\n    --pointcolor8: transparent;\n    --pointcolor9: transparent;\n    --pointcolor10: transparent;\n}\n\n\n.ct-series-a .ct-line  {\n  stroke: var(--strokecolor1);\n  stroke-width: var(--strokewidth1);\n}\n\n.ct-series-b .ct-line  {\n  stroke: var(--strokecolor2);\n  stroke-width: var(--strokewidth2);\n}\n\n.ct-series-c .ct-line  {\n  stroke: var(--strokecolor3);\n  stroke-width: var(--strokewidth3);\n}\n\n.ct-series-d .ct-line  {\n  stroke: var(--strokecolor4);\n  stroke-width: var(--strokewidth4);\n}\n\n.ct-series-e .ct-line  {\n  stroke: var(--strokecolor5);\n  stroke-width: var(--strokewidth5);\n}\n\n.ct-series-f .ct-line  {\n  stroke: var(--strokecolor6);\n  stroke-width: var(--strokewidth6);\n}\n\n.ct-series-g .ct-line  {\n  stroke: var(--strokecolor7);\n  stroke-width: var(--strokewidth7);\n}\n\n.ct-series-h .ct-line  {\n  stroke: var(--strokecolor8);\n  stroke-width: var(--strokewidth8);\n}\n\n.ct-series-i .ct-line  {\n  stroke: var(--strokecolor9);\n  stroke-width: var(--strokewidth9);\n}\n\n.ct-series-j .ct-line  {\n  stroke: var(--strokecolor10);\n  stroke-width: var(--strokewidth10);\n}\n\n.ct-series-a .ct-area {\n    fill:  var(--fill1);\n}\n\n.ct-series-b .ct-area {\n    fill:  var(--fill2);\n}\n\n.ct-series-c .ct-area {\n    fill:  var(--fill3);\n}\n\n.ct-series-d .ct-area {\n    fill:  var(--fill4);\n}\n\n.ct-series-e .ct-area {\n    fill:  var(--fill5);\n}\n\n.ct-series-f .ct-area {\n    fill:  var(--fill6);\n}\n\n.ct-series-g .ct-area {\n    fill:  var(--fill7);\n}\n\n.ct-series-h .ct-area {\n    fill:  var(--fill8);\n}\n\n.ct-series-i .ct-area {\n    fill:  var(--fill9);\n}\n\n.ct-series-j .ct-area {\n    fill:  var(--fill10);\n}\n\n.ct-zoom-rect {\n  fill: rgba(200, 100, 100, 0.3);\n  stroke: red;\n}\n\n.chartist-tooltip {\n  opacity: 0;\n  position: absolute;\n  margin: 20px 0 0 10px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #FFF;\n  padding: 5px 10px;\n  border-radius: 4px;\n}\n\n.ct-series-a .ct-point {\n        stroke: var(--pointcolor1)\n    }\n.ct-series-b .ct-point {\n        stroke: var(--pointcolor2)\n    }\n.ct-series-c .ct-point {\n        stroke: var(--pointcolor3)\n    }\n.ct-series-d .ct-point {\n        stroke: var(--pointcolor4)\n    }\n.ct-series-e .ct-point {\n        stroke: var(--pointcolor5)\n    }\n.ct-series-f .ct-point {\n        stroke: var(--pointcolor6)\n    }\n.ct-series-g .ct-point {\n        stroke: var(--pointcolor7)\n    }\n.ct-series-h .ct-point {\n        stroke: var(--pointcolor8)\n    }\n.ct-series-i .ct-point {\n        stroke: var(--pointcolor9)\n    }\n.ct-series-j .ct-point {\n        stroke: var(--pointcolor10)\n    }\n\n\n",
        "controllerScript": "self.onInit = function() {\r\n    \r\n    var pieData = {\r\n        labels: [],\r\n        datasets: []\r\n    };\r\n\r\n    var dataset = {\r\n        data: [],\r\n        backgroundColor: [],\r\n        borderColor: [],\r\n        borderWidth: [],\r\n        hoverBackgroundColor: []\r\n    }\r\n    // },{\r\n    //     data: [],\r\n    //     backgroundColor: [],\r\n    //     borderColor: [],\r\n    //     borderWidth: [],\r\n    //     hoverBackgroundColor: []\r\n    //}]\r\n    //  dataset = [{\r\n    //         type: 'bar',\r\n    //         label: 'Bar Dataset',\r\n    //         data: [10, 20, 30, 40]\r\n    //     }, {\r\n    //         type: 'line',\r\n    //         label: 'Line Dataset',\r\n    //         data: [50, 50, 50, 50],\r\n    //     }]\r\n    \r\n    pieData.datasets.push(dataset);\r\n    \r\n    for (var i=0; i < self.ctx.data.length; i++) {\r\n        var dataKey = self.ctx.data[i].dataKey;\r\n        var units = dataKey.units && dataKey.units.length ? dataKey.units : self.ctx.units;\r\n        units = units ? (' (' + units + ')') : '';\r\n        pieData.labels.push(dataKey.label + units);\r\n        dataset.data.push(0);\r\n        var hoverBackgroundColor = tinycolor(dataKey.color).lighten(15);\r\n        var borderColor = tinycolor(dataKey.color).darken();\r\n        dataset.backgroundColor.push(dataKey.color);\r\n        dataset.borderColor.push('#fff');\r\n        dataset.borderWidth.push(5);\r\n        dataset.hoverBackgroundColor.push(hoverBackgroundColor.toRgbString());\r\n    }\r\n\r\n    var ctx = $('#pieChart1', self.ctx.$container);\r\n    //var ctx1 = $('#pieChart1', self.ctx.$container);\r\n    self.ctx.chart = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: pieData,\r\n        options: {\r\n            responsive: false,\r\n            maintainAspectRatio: false\r\n        }\r\n    });\r\n        self.ctx.chart = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: pieData,\r\n        options: {\r\n            responsive: false,\r\n            maintainAspectRatio: false\r\n        }\r\n    });    \r\n    \r\n    self.onResize();\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n    for (var i = 0; i < self.ctx.data.length; i++) {\r\n        var cellData = self.ctx.data[i];\r\n        if (cellData.data.length > 0) {\r\n            var decimals;\r\n            if (typeof cellData.dataKey.decimals !== 'undefined' \r\n                && cellData.dataKey.decimals !== null ) {\r\n                decimals = cellData.dataKey.decimals; \r\n            } else {\r\n                decimals = self.ctx.decimals;\r\n            }\r\n            var tvPair = cellData.data[cellData.data.length - 1];\r\n            var value = self.ctx.utils.formatValue(tvPair[1], decimals);\r\n            self.ctx.chart.data.datasets[0].data[i] = parseFloat(value);\r\n        }\r\n    }\r\n    self.ctx.chart.update();\r\n}\r\n\r\nself.onResize = function() {\r\n    self.ctx.chart.resize();\r\n}",
        "settingsSchema": "",
        "dataKeySettingsSchema": "",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"fillColor\":\"#8a0000\",\"fillChart\":true},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#071aff\",\"settings\":{\"fillColor\":\"#0c3efb\",\"fillChart\":true},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"showDataPoints\":false},\"title\":\"chart_linh01\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"useDashboardTimewindow\":true}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "static",
      "name": "Change Dashboard State",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 2.5,
        "resources": [],
        "templateHtml": "<div id=\"changeDashboardState\">\n<span id=\"dashboardStateLabel\">Change Dashboard State</span>\n<select id=\"dashboardState\" name=\"dashboardState\">\n     \n    </select>\n    </div>",
        "templateCss": "#changeDashboardState {\n\nwidth: 100%;\n    top: 50%;\n    text-align: center;\n    position: absolute;\n}\n\n#dashboardState\n{\n    margin-left: 5px;\n}",
        "controllerScript": "self.onInit = function() {\n  \n    var settings = self.ctx.settings;\n    //set Font size of select\n    $('#dashboardState', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    //set Font size of label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    \n    //set Font color of Select\n    $('#dashboardState', self.ctx.$container)[0].style.color = settings.fontColor;\n    //set Font color of Label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.color = settings.fontColor;\n    \n    //set Label Text according to settings\n    $('#dashboardStateLabel', self.ctx.$container)[0].innerHTML = settings.labelText;\n    \n  \n    //Add Options to the Select\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        $('#dashboardState', self.ctx.$container).append($('<option>', {\n                    text: settings.dashboardStateList[i].listEntry\n                }));\n    }\n    \n    \n    //Select changed\n    $('#dashboardState', self.ctx.$container).change(function() {\n    var listEntry = ('#dashboardState', self.ctx.$container).find(\":selected\").text()\n    console.log(\"list Entry:\" + listEntry)\n    \n    //Get Alias for the given name\n    var alias = settings.dashboardStateList[0].dashboardAlias;\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        if (settings.dashboardStateList[i].listEntry == listEntry)\n        {\n            alias = settings.dashboardStateList[i].dashboardAlias;\n            break;\n        }\n    }\n    \n  var selection = alias;\n\n  var stateController = self.ctx.stateController;\n  var stateID = stateController.getStateId();\n  var params = stateController.getStateParams();\n\n  var entityId = (getEntityID(selection));\n \n  params.entityName = selection;\n  params.entityId.id = entityId;\n  \n    \nstateController.resetState();\n  stateController.updateState(stateID=stateID, params=params, true);\n  \n  \n});\n\n\nfunction getEntityID (alias)\n{\n    var aliases = self.ctx.dashboard.aliasController.entityAliases;\n   for (let element in aliases)\n   {\n       \n        if (aliases[element].alias == alias)\n            return aliases[element].filter.singleEntity.id;\n   }\n        \n}\n    \n\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \n            \"fontSize\": {\n                \"title\": \"Font size\",\n                \"type\": \"number\",\n                \"default\": 16\n            },\n            \"fontColor\": {\n                \"title\": \"Font color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"labelText\": {\n                \"title\": \"Label Text\",\n                \"type\": \"string\",\n                \"default\": \"Change Dashboard State\"\n            },\n            \"dashboardStateList\": {\n                \"title\": \"Dashboard State list\",\n                \"type\": \"array\",\n                \"minItems\" : 1,\n                \"items\": {\n                    \"title\": \"Dashboard State\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"dashboardAlias\": {\n                            \"title\": \"Dashboard Alias\",\n                            \"type\": \"string\"\n                        },\n                        \"listEntry\": {\n                            \"title\": \"List Entry\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"dashboardAlias\", \"listEntry\"]\n                }\n            }\n            },\n        \"required\": [\"dashboardStateList\"]\n    },\n    \"form\": [\n        \"fontSize\",\n        \"fontColor\",\n        \"labelText\",\n        \"dashboardStateList\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"dashboardStateList\":[{\"name\":\"test\",\"dashboardAlias\":\"CAG1D1\",\"listEntry\":\"Device 1\"}],\"fontSize\":16,\"fontColor\":\"#008a00\",\"labelText\":\"Change Dashboard State\"},\"title\":\"Change Dashboard State\",\"dropShadow\":true}"
      },
      "image": null,
      "description": null
    },
    {
      "alias": "table_linhnv10",
      "name": "table-linhnv10",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
          }
        ],
        "templateHtml": "<tb-entities-table-widget\n    [ctx]=\"ctx\" style=\"background-color:#FF0000\">\n</tb-entities-table-widget>\n",
        "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 3px;\n    padding: 3px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}\n.tbDatasource-table th {\n            background-color:#d4e3e5;\n            padding: 8px;\n}\n",
        "controllerScript": "self.onInit = function() {\n}\n\nself.onDataUpdated = function() {\n    self.ctx.$scope.entitiesTableWidget.onDataUpdated();\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        hasDataPageLink: true,\n        warnOnPageDataOverflow: false,\n        dataKeysOptional: true\n    };\n}\n\nself.actionSources = function() {\n    return {\n        'actionCellButton': {\n            name: 'widget-action.action-cell-button',\n            multiple: true\n        },\n        'rowClick': {\n            name: 'widget-action.row-click',\n            multiple: false\n        },\n        'rowDoubleClick': {\n            name: 'widget-action.row-double-click',\n            multiple: false\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"entitiesTitle\": {\n                \"title\": \"Entities table title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"enableSearch\": {\n                \"title\": \"Enable entities search\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"enableSelectColumnDisplay\": {\n                \"title\": \"Enable select columns to display\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"enableStickyHeader\": {\n                \"title\": \"Always display header\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"enableStickyAction\": {\n                \"title\": \"Always display actions column\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayEntityName\": {\n                \"title\": \"Display entity name column\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"entityNameColumnTitle\": {\n                \"title\": \"Entity name column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"displayEntityLabel\": {\n                \"title\": \"Display entity label column\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"entityLabelColumnTitle\": {\n                \"title\": \"Entity label column title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"displayEntityType\": {\n                \"title\": \"Display entity type column\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            },\n            \"defaultSortOrder\": {\n                \"title\": \"Default sort order\",\n                \"type\": \"string\",\n                \"default\": \"entityName\"\n            },\n            \"useRowStyleFunction\": {\n                \"title\": \"Use row style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"rowStyleFunction\": {\n                \"title\": \"Row style function: f(entity, ctx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"entitiesTitle\",\n        \"enableSearch\",\n        \"enableSelectColumnDisplay\",\n        \"enableStickyHeader\",\n        \"enableStickyAction\",\n        \"displayEntityName\",\n        \"entityNameColumnTitle\",\n        \"displayEntityLabel\",\n        \"entityLabelColumnTitle\",\n        \"displayEntityType\",\n        \"displayPagination\",\n        \"defaultPageSize\",\n        \"defaultSortOrder\",\n        \"useRowStyleFunction\",\n        {\n            \"key\": \"rowStyleFunction\",\n            \"type\": \"javascript\",\n            \"condition\": \"model.useRowStyleFunction === true\"\n        }\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"columnWidth\": {\n                \"title\": \"Column width (px or %)\",\n                \"type\": \"string\",\n                \"default\": \"0px\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value, entity, ctx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, entity, ctx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"defaultColumnVisibility\": {\n                \"title\": \"Default column visibility\",\n                \"type\": \"string\",\n                \"default\": \"visible\"\n            },\n            \"columnSelectionToDisplay\": {\n                \"title\": \"Column selection in 'Columns to Display'\",\n                \"type\": \"string\",\n                \"default\": \"enabled\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"columnWidth\",\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\",\n            \"condition\": \"model.useCellStyleFunction === true\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\",\n            \"condition\": \"model.useCellContentFunction === true\"\n        },\n        {\n            \"key\": \"defaultColumnVisibility\",\n            \"type\": \"rc-select\",\n            \"multiple\": false,\n            \"items\": [\n                {\n                    \"value\": \"visible\",\n                    \"label\": \"Visible\"\n                },\n                {\n                    \"value\": \"hidden\",\n                    \"label\": \"Hidden\"\n                }    \n            ]\n        },\n        {\n            \"key\": \"columnSelectionToDisplay\",\n            \"type\": \"rc-select\",\n            \"multiple\": false,\n            \"items\": [\n                {\n                    \"value\": \"enabled\",\n                    \"label\": \"Enabled\"\n                },\n                {\n                    \"value\": \"disabled\",\n                    \"label\": \"Disabled\"\n                }    \n            ]\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"table-linhnv10\"}"
      },
      "image": null,
      "description": null
    }
  ]
}