{
  "title": "Quản lý lỗi HMI",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "8c56a27c-1b10-ca11-4b84-f1a01c619baa": {
        "isSystemType": true,
        "bundleAlias": "entity_admin_widgets",
        "typeAlias": "device_admin_table",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "#000000",
          "color": "rgba(255,255,255,0.87)",
          "padding": "4px",
          "settings": {
            "enableSearch": true,
            "displayPagination": true,
            "displayEntityName": true,
            "displayEntityType": false,
            "enableSelectColumnDisplay": false,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "useRowStyleFunction": false,
            "entitiesTitle": "Quản lý và khai báo lỗi",
            "displayEntityLabel": true,
            "entityNameColumnTitle": "Tên lỗi",
            "entityLabelColumnTitle": "Mã lỗi",
            "defaultSortOrder": "entityName",
            "defaultPageSize": 100
          },
          "title": "Quản lí dây chuyền",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px",
            "color": "red"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "73b061c1-45b5-fd25-249b-f0991520ddea",
              "filterId": "54a43014-f7de-4025-c502-8553b234afd1",
              "dataKeys": [
                {
                  "name": "description",
                  "type": "attribute",
                  "label": "Mô tả lỗi",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "cellStyleFunction": "",
                    "useCellContentFunction": false,
                    "cellContentFunction": "",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled"
                  },
                  "_hash": 0.07481044769432998,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "createdTime",
                  "type": "entityField",
                  "label": "Thời gian tạo",
                  "color": "#4caf50",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "cellStyleFunction": "",
                    "useCellContentFunction": false,
                    "cellContentFunction": "",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled"
                  },
                  "_hash": 0.9170106661080583,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {
            "color": "red"
          },
          "displayTimewindow": true,
          "actions": {
            "headerButton": [
              {
                "name": "Thêm lỗi",
                "icon": "add",
                "type": "customPretty",
                "customHtml": "<form #addDeviceForm=\"ngForm\"\r\n    [formGroup]=\"productionLineForm\" (ngSubmit)=\"save()\"\r\n    style=\"width: 480px;\">\r\n    <mat-toolbar fxLayout=\"row\" color=\"accent\">\r\n        <h2>Thêm mới dây chuyền</h2>\r\n        <span fxFlex></span>\r\n        <button mat-button mat-icon-button\r\n            (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon class=\"material-icons\">close\r\n            </mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\"\r\n        *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\">\r\n    </div>\r\n    <div mat-dialog-content>\r\n\r\n        <div class=\"mat-padding\" fxLayout=\"column\">\r\n            <mat-form-field class=\"mat-block\">\r\n                <mat-label>Tên lỗi</mat-label>\r\n                <input type=\"string\" matInput\r\n                    formControlName=\"name\">\r\n            </mat-form-field>\r\n            <mat-form-field class=\"mat-block\">\r\n                <mat-label>Mã lỗi</mat-label>\r\n                <input type=\"string\" matInput\r\n                    formControlName=\"label\">\r\n            </mat-form-field>\r\n            <div formGroupName=\"attributes\"\r\n                fxLayout=\"column\" fxLayoutGap=\"8px\">\r\n\r\n                <mat-form-field\r\n                    *ngFor=\"let production of productionLines\"\r\n                    fxFlex class=\"mat-block\">\r\n                    <mat-label>{{production.name}}\r\n                    </mat-label>\r\n                    <input type=\"string\" step=\"any\" matInput\r\n                        [formControlName]=\"production.key\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions fxLayout=\"row\">\r\n        <span fxFlex></span>\r\n        <button mat-button color=\"primary\" type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n            Hủy\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"accent\"\r\n            style=\"margin-right: 20px;\" type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || productionLineForm.invalid || !productionLineForm.dirty\">\r\n            Thêm mới\r\n        </button>\r\n    </div>\r\n</form>",
                "customCss": "",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\n\r\nopenAddDeviceDialog();\r\n\r\nfunction openAddDeviceDialog() {\r\n    console.log(\"HTMl template: \", htmlTemplate);\r\n    customDialog.customDialog(htmlTemplate, AddDeviceDialogController).subscribe();\r\n}\r\n\r\nfunction AddDeviceDialogController(instance) {\r\n    \r\n    let vm = instance;\r\n    // vm.config = \"AAAA\";\r\n        vm.productionLines = [\r\n        {\r\n            \"key\": \"description\",\r\n            \"name\": \"Mô tả lỗi\",\r\n            \"type\": \"string\"\r\n        }\r\n    ];\r\n    vm.productionLineForm = vm.fb.group({\r\n      name: ['', [vm.validators.required]],\r\n      label: ['', vm.validators.required],\r\n      attributes: vm.fb.group({\r\n      })\r\n    });\r\n    items = vm.productionLineForm.get('attributes');\r\n    vm.productionLines.forEach(c => {\r\n        items.addControl(c.key, vm.fb.control('', vm.validators.required));\r\n    });\r\n    vm.productionLineForm.setControl('attributes', items);\r\n    \r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n    \r\n    vm.save = function() {\r\n        vm.productionLineForm.markAsPristine();\r\n        let asset = {\r\n            name: vm.productionLineForm.get('name').value,\r\n            type: 'error_hmi',\r\n            label: vm.productionLineForm.get('label').value\r\n        };\r\n        assetService.saveAsset(asset).subscribe(\r\n            function (asset) {\r\n                saveAttributes(asset.id).subscribe(\r\n                    function () {\r\n                        widgetContext.updateAliases();\r\n                        vm.dialogRef.close(null);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n    function saveAttributes(entityId) {\r\n        let attributes = vm.productionLineForm.get('attributes').value;\r\n        let attributesArray = [];\r\n        for (let key in attributes) {\r\n            attributesArray.push({key: key, value: attributes[key]});\r\n        }\r\n        if (attributesArray.length > 0) {\r\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\r\n        } else {\r\n            return widgetContext.rxjs.of([]);\r\n        }\r\n    }\r\n}",
                "customResources": [
                  {
                    "url": "https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
                  }
                ],
                "id": "70837a9d-c3de-a9a7-03c5-dccd14998758"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit Error",
                "icon": "edit",
                "type": "customPretty",
                "customHtml": "<!--=======================================================================-->\r\n<!--=====  There are two example templates: for edit and add entity   =====-->\r\n<!--=======================================================================-->\r\n<!--========================  Edit entity example  ========================-->\r\n<!--=======================================================================-->\r\n \r\n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\r\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\r\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>\r\n        <span fxFlex></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n    <div mat-dialog-content>\r\n\r\n        <div class=\"mat-padding\" fxLayout=\"column\">\r\n            <mat-form-field class=\"mat-block\">\r\n                <mat-label>Tên lỗi</mat-label>\r\n                <input type=\"string\" matInput\r\n                    formControlName=\"name\">\r\n            </mat-form-field>\r\n            <mat-form-field class=\"mat-block\">\r\n                <mat-label>Mã lỗi</mat-label>\r\n                <input type=\"string\" matInput\r\n                    formControlName=\"label\">\r\n            </mat-form-field>\r\n            <div formGroupName=\"attributes\"\r\n                fxLayout=\"column\" fxLayoutGap=\"8px\">\r\n\r\n                <mat-form-field\r\n                    fxFlex class=\"mat-block\">\r\n                    <mat-label>\r\n                        Mô tả lỗi                        \r\n                    </mat-label>\r\n                    <input type=\"string\" step=\"any\" matInput\r\n                        formControlName=\"description\">\r\n                </mat-form-field>\r\n                <mat-form-field\r\n                fxFlex class=\"mat-block\">\r\n                <mat-label>\r\n                   Mã lỗi chung                       \r\n                </mat-label>\r\n                <input type=\"string\" step=\"any\" matInput\r\n                    formControlName=\"common_err\">\r\n            </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-button color=\"primary\"\r\n                type=\"button\"\r\n                [disabled]=\"(isLoading$ | async)\"\r\n                (click)=\"cancel()\" cdkFocusInitial>\r\n            Cancel\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n                type=\"submit\"\r\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Save\r\n        </button>\r\n    </div>\r\n</form>\r\n\r\n<!--========================================================================-->\r\n<!--=========================  Add entity example  =========================-->\r\n<!--========================================================================-->\r\n<!---->\r\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\r\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\r\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\r\n<!--        <h2>Add entity</h2>-->\r\n<!--        <span fxFlex></span>-->\r\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\r\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\r\n<!--        </button>-->\r\n<!--    </mat-toolbar>-->\r\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\r\n<!--    </mat-progress-bar>-->\r\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\r\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Name</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityName\" required>-->\r\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\r\n<!--                    Entity name is required.-->\r\n<!--                </mat-error>-->\r\n<!--            </mat-form-field>-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Label</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityLabel\" >-->\r\n<!--            </mat-form-field>-->\r\n<!--        </div>-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <tb-entity-type-select-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"entityType\"-->\r\n<!--                    [showLabel]=\"true\"-->\r\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\r\n<!--            ></tb-entity-type-select>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'ASSET'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'DEVICE'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--        </div>-->\r\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Latitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Longitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Address</mat-label>-->\r\n<!--                    <input matInput formControlName=\"address\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Owner</mat-label>-->\r\n<!--                    <input matInput formControlName=\"owner\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Integer Value</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\r\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\r\n<!--                        Invalid integer value.-->\r\n<!--                    </mat-error>-->\r\n<!--                </mat-form-field>-->\r\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\r\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                    </mat-checkbox>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"relations-list\">-->\r\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\r\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\r\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\r\n<!--                        <div fxFlex fxLayout=\"column\">-->\r\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\r\n<!--                                    <mat-label>Direction</mat-label>-->\r\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\r\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\r\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\r\n<!--                                        </mat-option>-->\r\n<!--                                    </mat-select>-->\r\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\r\n<!--                                        Relation direction is required.-->\r\n<!--                                    </mat-error>-->\r\n<!--                                </mat-form-field>-->\r\n<!--                                <tb-relation-type-autocomplete-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        formControlName=\"relationType\"-->\r\n<!--                                        [required]=\"true\">-->\r\n<!--                                </tb-relation-type-autocomplete>-->\r\n<!--                            </div>-->\r\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\r\n<!--                                <tb-entity-select-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        [required]=\"true\"-->\r\n<!--                                        formControlName=\"relatedEntity\">-->\r\n<!--                                </tb-entity-select>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\r\n<!--                            <button mat-icon-button color=\"primary\"-->\r\n<!--                                    aria-label=\"Remove\"-->\r\n<!--                                    type=\"button\"-->\r\n<!--                                    (click)=\"removeRelation(i)\"-->\r\n<!--                                    matTooltip=\"Remove relation\"-->\r\n<!--                                    matTooltipPosition=\"above\">-->\r\n<!--                                <mat-icon>close</mat-icon>-->\r\n<!--                            </button>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--            <div>-->\r\n<!--                <button mat-raised-button color=\"primary\"-->\r\n<!--                        type=\"button\"-->\r\n<!--                        (click)=\"addRelation()\"-->\r\n<!--                        matTooltip=\"Add Relation\"-->\r\n<!--                        matTooltipPosition=\"above\">-->\r\n<!--                    Add-->\r\n<!--                </button>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--    </div>-->\r\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\r\n<!--        <button mat-button color=\"primary\"-->\r\n<!--                type=\"button\"-->\r\n<!--                [disabled]=\"(isLoading$ | async)\"-->\r\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\r\n<!--            Cancel-->\r\n<!--        </button>-->\r\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\r\n<!--                type=\"submit\"-->\r\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\r\n<!--            Create-->\r\n<!--        </button>-->\r\n<!--    </div>-->\r\n<!--</form>-->",
                "customCss": "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction": "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//\n//openDeleteEntityDialog();\n//\n//function openDeleteEntityDialog() {\n//    let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n//                 entityName;\n//    let content = 'Are you sure you want to delete the ' +\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n//    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n//        function(result) {\n//            if (result) {\n//                deleteEntity();\n//            }\n//        }\n//    );\n//}\n//\n//function deleteEntity() {\n//    deleteEntityObservable(entityId).subscribe(\n//        function success() {\n//            widgetContext.updateAliases();\n//        },\n//        function fail() {\n//            showErrorDialog();\n//        }\n//    );\n//}\n//\n//function deleteEntityObservable(entityId) {\n//    if (entityId.entityType == \"ASSET\") {\n//        return assetService.deleteAsset(entityId.id);\n//    } else if (entityId.entityType == \"DEVICE\") {\n//        return deviceService.deleteDevice(entityId.id);\n//    }\n//}\n//\n//function showErrorDialog() {\n//    let title = 'Error';\n//    let content = 'An error occurred while deleting the entity. Please try again.';\n//    dialogs.alert(title, content, 'CLOSE').subscribe(\n//        function(result) {}\n//    );\n//}\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.attributes = {};\n    vm.oldRelationsData = [];\n    vm.relationsToDelete = [];\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        type: ['', [vm.validators.required]],\n        name: ['', [vm.validators.required]],\n        label: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null],\n            address: [null],\n            owner: [null],\n            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n            booleanValue: [false],\n            description: ['', [vm.validators.required]]\n        }),\n        oldRelations: vm.fb.array([]),\n        relations: vm.fb.array([])\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.relations = function() {\n        return vm.editEntityFormGroup.get('relations');\n    };\n\n    vm.oldRelations = function() {\n        return vm.editEntityFormGroup.get('oldRelations');\n    };\n\n    vm.addRelation = function() {\n        vm.relations().push(vm.fb.group({\n            relatedEntity: [null, [vm.validators.required]],\n            relationType: [null, [vm.validators.required]],\n            direction: [null, [vm.validators.required]]\n        }));\n    };\n\n    function addOldRelation() {\n        vm.oldRelations().push(vm.fb.group({\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\n        }));\n    }\n\n    vm.removeRelation = function(index) {\n        vm.relations().removeAt(index);\n        vm.relations().markAsDirty();\n    };\n\n    vm.removeOldRelation = function(index) {\n        vm.oldRelations().removeAt(index);\n        vm.relationsToDelete.push(vm.oldRelationsData[index]);\n        vm.oldRelations().markAsDirty();\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveRelations(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityRelations(relations) {\n        let relationsFrom = relations[0];\n        let relationsTo = relations[1];\n        for (let i=0; i < relationsFrom.length; i++) {\n            let relation = {\n                direction: 'FROM',\n                relationType: relationsFrom[i].type,\n                relatedEntity: relationsFrom[i].to\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n        for (let i=0; i < relationsTo.length; i++) {\n            let relation = {\n                direction: 'TO',\n                relationType: relationsTo[i].type,\n                relatedEntity: relationsTo[i].from\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n    }\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            entityRelationService.findInfoByFrom(entityId),\n            entityRelationService.findInfoByTo(entityId),\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityRelations(data.slice(0,2));\n                getEntityAttributes(data[2]);\n                vm.entity = data[3];\n                vm.editEntityFormGroup.patchValue({\n                    name: vm.entity.name,\n                    label: vm.entity.label,\n                    entityName: vm.entity.name,\n                    entityType: vm.entityType,\n                    entityLabel: vm.entity.label,\n                    type: vm.entity.type,\n                    attributes: vm.attributes,\n                    oldRelations: vm.oldRelationsData\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        if (vm.entity.label !== formValues.label\n           || vm.entity.name !== formValues.name){\n            vm.entity.label = formValues.label;\n            vm.entity.name = formValues.name\n            if (formValues.entityType == 'ASSET') {\n                return assetService.saveAsset(vm.entity);\n            } else if (formValues.entityType == 'DEVICE') {\n                return deviceService.saveDevice(vm.entity);\n            }\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveRelations(entityId) {\n        let relations = vm.editEntityFormGroup.get('relations').value;\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\n            let relation = {\n                type: vm.relationsToDelete[i].relationType\n            };\n            if (vm.relationsToDelete[i].direction == 'FROM') {\n                relation.to = vm.relationsToDelete[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = vm.relationsToDelete[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}\n\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n",
                "customResources": [],
                "id": "93931e52-5d7c-903e-67aa-b9435df44ff4"
              },
              {
                "name": "Xóa lỗi",
                "icon": "delete",
                "type": "custom",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteAssetDialog();\n\nfunction openDeleteAssetDialog() {\n    let title = \"Bạn có muốn xóa lỗi \" + entityName +  \"?\";\n    let content = \"Hãy cẩn thận, mọi thông tin về  ỗi  sẽ bị xóa\";\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function (result) {\n            if (result) {\n                deleteAsset();\n            }\n        }\n    );\n}\n\nfunction deleteAsset() {\n    assetService.deleteAsset(entityId.id).subscribe(\n        function () {\n            widgetContext.updateAliases();\n        }\n    );\n}\n",
                "id": "ec2708f6-9ff0-186b-e4fc-7635ebfa3074"
              },
              {
                "name": "Gán lỗi chung",
                "icon": "list",
                "type": "customPretty",
                "customHtml": "<!--=======================================================================-->\r\n<!--=====  There are two example templates: for edit and add entity   =====-->\r\n<!--=======================================================================-->\r\n<!--========================  Edit entity example  ========================-->\r\n<!--=======================================================================-->\r\n \r\n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\r\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\r\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n        <h2>Danh sách nhóm lỗi</h2>\r\n        <span fxFlex></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n    <div mat-dialog-content fxLayout=\"column\">\r\n        <div formArrayName=\"errorAssets\" *ngFor=\"let error of errorAssets().controls; let i = index;\">\r\n            <div [formGroupName]=\"i\">\r\n                <mat-checkbox formControlName=\"checked\">\r\n                  {{error.value.name}}\r\n              </mat-checkbox>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-button color=\"primary\"\r\n                type=\"button\"\r\n                [disabled]=\"(isLoading$ | async)\"\r\n                (click)=\"cancel()\" cdkFocusInitial>\r\n            Cancel\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n                type=\"submit\"\r\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Save\r\n        </button>\r\n    </div>\r\n</form>\r\n<mat-paginator [length]=\"allErrorLength\"\r\n                  [pageSize]=\"50\"\r\n                  [pageSizeOptions]=\"[10, 20, 50, 100]\"\r\n                  aria-label=\"Select page\"\r\n                  (page)=\"onPageChange($event)\">\r\n</mat-paginator>\r\n<!--========================================================================-->\r\n<!--=========================  Add entity example  =========================-->\r\n<!--========================================================================-->\r\n<!---->\r\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\r\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\r\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\r\n<!--        <h2>Add entity</h2>-->\r\n<!--        <span fxFlex></span>-->\r\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\r\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\r\n<!--        </button>-->\r\n<!--    </mat-toolbar>-->\r\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\r\n<!--    </mat-progress-bar>-->\r\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\r\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Name</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityName\" required>-->\r\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\r\n<!--                    Entity name is required.-->\r\n<!--                </mat-error>-->\r\n<!--            </mat-form-field>-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Label</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityLabel\" >-->\r\n<!--            </mat-form-field>-->\r\n<!--        </div>-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <tb-entity-type-select-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"entityType\"-->\r\n<!--                    [showLabel]=\"true\"-->\r\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\r\n<!--            ></tb-entity-type-select>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'ASSET'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'DEVICE'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--        </div>-->\r\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Latitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Longitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Address</mat-label>-->\r\n<!--                    <input matInput formControlName=\"address\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Owner</mat-label>-->\r\n<!--                    <input matInput formControlName=\"owner\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Integer Value</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\r\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\r\n<!--                        Invalid integer value.-->\r\n<!--                    </mat-error>-->\r\n<!--                </mat-form-field>-->\r\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\r\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                    </mat-checkbox>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"relations-list\">-->\r\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\r\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\r\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\r\n<!--                        <div fxFlex fxLayout=\"column\">-->\r\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\r\n<!--                                    <mat-label>Direction</mat-label>-->\r\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\r\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\r\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\r\n<!--                                        </mat-option>-->\r\n<!--                                    </mat-select>-->\r\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\r\n<!--                                        Relation direction is required.-->\r\n<!--                                    </mat-error>-->\r\n<!--                                </mat-form-field>-->\r\n<!--                                <tb-relation-type-autocomplete-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        formControlName=\"relationType\"-->\r\n<!--                                        [required]=\"true\">-->\r\n<!--                                </tb-relation-type-autocomplete>-->\r\n<!--                            </div>-->\r\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\r\n<!--                                <tb-entity-select-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        [required]=\"true\"-->\r\n<!--                                        formControlName=\"relatedEntity\">-->\r\n<!--                                </tb-entity-select>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\r\n<!--                            <button mat-icon-button color=\"primary\"-->\r\n<!--                                    aria-label=\"Remove\"-->\r\n<!--                                    type=\"button\"-->\r\n<!--                                    (click)=\"removeRelation(i)\"-->\r\n<!--                                    matTooltip=\"Remove relation\"-->\r\n<!--                                    matTooltipPosition=\"above\">-->\r\n<!--                                <mat-icon>close</mat-icon>-->\r\n<!--                            </button>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--            <div>-->\r\n<!--                <button mat-raised-button color=\"primary\"-->\r\n<!--                        type=\"button\"-->\r\n<!--                        (click)=\"addRelation()\"-->\r\n<!--                        matTooltip=\"Add Relation\"-->\r\n<!--                        matTooltipPosition=\"above\">-->\r\n<!--                    Add-->\r\n<!--                </button>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--    </div>-->\r\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\r\n<!--        <button mat-button color=\"primary\"-->\r\n<!--                type=\"button\"-->\r\n<!--                [disabled]=\"(isLoading$ | async)\"-->\r\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\r\n<!--            Cancel-->\r\n<!--        </button>-->\r\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\r\n<!--                type=\"submit\"-->\r\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\r\n<!--            Create-->\r\n<!--        </button>-->\r\n<!--    </div>-->\r\n<!--</form>-->\r\n",
                "customCss": "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction": "/*=======================================================================*/\r\n/*=====  There are three examples: for delete, edit and add entity  =====*/\r\n/*=======================================================================*/\r\n/*=======================  Delete entity example  =======================*/\r\n/*=======================================================================*/\r\n//\r\n//let $injector = widgetContext.$scope.$injector;\r\n//let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\r\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\n//\r\n//openDeleteEntityDialog();\r\n//\r\n//function openDeleteEntityDialog() {\r\n//    let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\r\n//                 entityName;\r\n//    let content = 'Are you sure you want to delete the ' +\r\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\r\n//    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\r\n//        function(result) {\r\n//            if (result) {\r\n//                deleteEntity();\r\n//            }\r\n//        }\r\n//    );\r\n//}\r\n//\r\n//function deleteEntity() {\r\n//    deleteEntityObservable(entityId).subscribe(\r\n//        function success() {\r\n//            widgetContext.updateAliases();\r\n//        },\r\n//        function fail() {\r\n//            showErrorDialog();\r\n//        }\r\n//    );\r\n//}\r\n//\r\n//function deleteEntityObservable(entityId) {\r\n//    if (entityId.entityType == \"ASSET\") {\r\n//        return assetService.deleteAsset(entityId.id);\r\n//    } else if (entityId.entityType == \"DEVICE\") {\r\n//        return deviceService.deleteDevice(entityId.id);\r\n//    }\r\n//}\r\n//\r\n//function showErrorDialog() {\r\n//    let title = 'Error';\r\n//    let content = 'An error occurred while deleting the entity. Please try again.';\r\n//    dialogs.alert(title, content, 'CLOSE').subscribe(\r\n//        function(result) {}\r\n//    );\r\n//}\r\n//\r\n/*=======================================================================*/\r\n/*========================  Edit entity example  ========================*/\r\n/*=======================================================================*/\r\n\r\nlet $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap\r\n    .get('customDialog'));\r\nlet entityService = $injector.get(widgetContext.servicesMap\r\n    .get('entityService'));\r\nlet assetService = $injector.get(widgetContext.servicesMap\r\n    .get('assetService'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap\r\n    .get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext\r\n    .servicesMap.get('attributeService'));\r\nlet entityRelationService = $injector.get(widgetContext\r\n    .servicesMap.get('entityRelationService'));\r\n\r\nopenEditEntityDialog();\r\n\r\nfunction openEditEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate,\r\n        EditEntityDialogController).subscribe();\r\n}\r\n\r\nfunction EditEntityDialogController(instance) {\r\n    let vm = instance;\r\n    vm.errorList = [];\r\n    vm.errorAssetsData = [];\r\n    vm.pageSize = 50;\r\n    vm.pageIndex = 0;\r\n    vm.entityName = entityName;\r\n    vm.entityType = entityId.entityType;\r\n    vm.entitySearchDirection = {\r\n        from: \"FROM\",\r\n        to: \"TO\"\r\n    };\r\n    vm.attributes = {};\r\n    vm.oldRelationsData = [];\r\n    vm.relationsToDelete = [];\r\n    vm.entity = {};\r\n\r\n    vm.editEntityFormGroup = vm.fb.group({\r\n        entityName: [''],\r\n        entityType: [null],\r\n        entityLabel: [null],\r\n        type: [''],\r\n        attributes: vm.fb.group({\r\n            latitude: [null],\r\n            longitude: [null],\r\n            address: [null],\r\n            owner: [null],\r\n            number: [null],\r\n            booleanValue: [false],\r\n            common_err: [null]\r\n        }),\r\n        oldRelations: vm.fb.array([]),\r\n        relations: vm.fb.array([]),\r\n        errorAssets: vm.fb.array([])\r\n    });\r\n\r\n    getEntityInfo();\r\n    vm.updateAllComplete = function () {\r\n        console.log(\"Update all complete: \", vm.errorAssets);\r\n    }\r\n    vm.cancel = function () {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.relations = function () {\r\n        return vm.editEntityFormGroup.get('relations');\r\n    };\r\n    vm.errorAssets = function () {\r\n        return vm.editEntityFormGroup.get('errorAssets');\r\n    }\r\n\r\n    vm.oldRelations = function () {\r\n        return vm.editEntityFormGroup.get(\r\n            'oldRelations');\r\n    };\r\n\r\n    vm.addRelation = function () {\r\n        vm.relations().push(vm.fb.group({\r\n            relatedEntity: [null, [vm\r\n                .validators.required\r\n            ]],\r\n            relationType: [null, [vm\r\n                .validators.required\r\n            ]],\r\n            direction: [null, [vm.validators\r\n                .required\r\n            ]]\r\n        }));\r\n    };\r\n\r\n    function addErrorAsset() {\r\n        vm.errorAssets().push(vm.fb.group({\r\n            checked: [false],\r\n            entityId: [null],\r\n            name: [null]\r\n        }))\r\n    }\r\n\r\n    function addOldRelation() {\r\n        vm.oldRelations().push(vm.fb.group({\r\n            relatedEntity: [{\r\n                value: null,\r\n                disabled: true\r\n            },\r\n            [vm.validators.required]\r\n            ],\r\n            relationType: [{\r\n                value: null,\r\n                disabled: true\r\n            },\r\n            [vm.validators.required]\r\n            ],\r\n            direction: [{\r\n                value: null,\r\n                disabled: true\r\n            },\r\n            [vm.validators.required]\r\n            ]\r\n        }));\r\n    }\r\n\r\n    vm.removeRelation = function (index) {\r\n        vm.relations().removeAt(index);\r\n        vm.relations().markAsDirty();\r\n    };\r\n\r\n    vm.removeOldRelation = function (index) {\r\n        vm.oldRelations().removeAt(index);\r\n        vm.relationsToDelete.push(vm.oldRelationsData[\r\n            index]);\r\n        vm.oldRelations().markAsDirty();\r\n    };\r\n\r\n    vm.save = function () {\r\n        vm.editEntityFormGroup.markAsPristine();\r\n        widgetContext.rxjs.forkJoin([\r\n            saveAttributes(entityId),\r\n            saveRelations(entityId),\r\n            saveEntity()\r\n        ]).subscribe(\r\n            function () {\r\n                widgetContext.updateAliases();\r\n                vm.dialogRef.close(null);\r\n            }\r\n        );\r\n    };\r\n\r\n    vm.onPageChange = function (event) {\r\n        console.log(\"Event:\", event);\r\n        // vm.pageStart = event.pageIndex*event.pageSize;\r\n        // vm.pageEnd = (event.pageIndex+1)*event.pageSize;\r\n        vm.pageSize = event.pageSize;\r\n        vm.pageIndex = event.pageIndex;\r\n        getEntityInfo();\r\n    }\r\n\r\n    function getEntityAttributes(attributes) {\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            vm.attributes[attributes[i].key] = attributes[i]\r\n                .value;\r\n        }\r\n    }\r\n\r\n    function getEntityRelations(relations) {\r\n        let relationsFrom = relations[0];\r\n        let relationsTo = relations[1];\r\n        for (let i = 0; i < relationsFrom.length; i++) {\r\n            let relation = {\r\n                direction: 'FROM',\r\n                relationType: relationsFrom[i].type,\r\n                relatedEntity: relationsFrom[i].to\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n        }\r\n        for (let i = 0; i < relationsTo.length; i++) {\r\n            let relation = {\r\n                direction: 'TO',\r\n                relationType: relationsTo[i].type,\r\n                relatedEntity: relationsTo[i].from\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n\r\n        }\r\n    }\r\n\r\n    function getErrorAssets(errorAssets) {\r\n        console.log(\"oldRelationsData: \", vm.oldRelationsData);\r\n        for (let i = 0; i < errorAssets.length; i++) {\r\n            let errorAsset = {\r\n                checked: vm.oldRelationsData.some(r => r.relatedEntity.id == errorAssets[i].id.id),\r\n                entityId: errorAssets[i].id,\r\n                name: errorAssets[i].name\r\n            }\r\n            console.log(\"ErrorAsset: \", errorAsset);\r\n            vm.errorAssetsData.push(errorAsset);\r\n            addErrorAsset();\r\n\r\n        }\r\n        console.log(\"errorAssets: \", vm.errorAssets().controls);\r\n    }\r\n\r\n    function getEntityInfo() {\r\n        widgetContext.rxjs.forkJoin([\r\n            entityRelationService.findInfoByFrom(\r\n                entityId),\r\n            entityRelationService.findInfoByTo(\r\n                entityId),\r\n            attributeService.getEntityAttributes(\r\n                entityId, 'SERVER_SCOPE'),\r\n            entityService.getEntity(entityId\r\n                .entityType, entityId.id),\r\n            assetService.getTenantAssetInfosError('error', vm.pageSize, vm.pageIndex)\r\n        ]).subscribe(\r\n            function (data) {\r\n                getEntityRelations(data.slice(0, 2));\r\n                vm.errorList = data.slice(0, 2)[0];\r\n                console.log(\"Data.slice(0,2): \", vm\r\n                    .errorList);\r\n                getEntityAttributes(data[2]);\r\n                vm.entity = data[3];\r\n                vm.errorAssetsData = [];\r\n                vm.errorAssetsData = [];\r\n                vm.errorAssets().clear();\r\n                getErrorAssets(data[4].data);\r\n                vm.allErrorLength = data[4].totalElements;\r\n                vm.editEntityFormGroup.patchValue({\r\n                    entityName: vm.entity.name,\r\n                    entityType: vm.entityType,\r\n                    entityLabel: vm.entity\r\n                        .label,\r\n                    type: vm.entity.type,\r\n                    attributes: vm.attributes,\r\n                    oldRelations: vm\r\n                        .oldRelationsData,\r\n                    errorAssets: vm.errorAssetsData\r\n                }, {\r\n                    emitEvent: false\r\n                });\r\n                console.log(\"vm.editEntityFormGroup: \", vm.errorAssets().controls);\r\n            }\r\n        );\r\n    }\r\n\r\n    function saveEntity() {\r\n        const formValues = vm.editEntityFormGroup.value;\r\n        if (vm.entity.label !== formValues.entityLabel) {\r\n            vm.entity.label = formValues.entityLabel;\r\n            if (formValues.entityType == 'ASSET') {\r\n                return assetService.saveAsset(vm.entity);\r\n            } else if (formValues.entityType == 'DEVICE') {\r\n                return deviceService.saveDevice(vm.entity);\r\n            }\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveAttributes(entityId) {\r\n        let attributes = vm.editEntityFormGroup.get(\r\n            'attributes').value;\r\n        let attributesArray = [];\r\n        for (let key in attributes) {\r\n            if (attributes[key] !== vm.attributes[key]) {\r\n                attributesArray.push({\r\n                    key: key,\r\n                    value: attributes[key]\r\n                });\r\n            }\r\n        }\r\n        if (attributesArray.length > 0) {\r\n            return attributeService.saveEntityAttributes(\r\n                entityId, \"SERVER_SCOPE\",\r\n                attributesArray);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveRelations(entityId) {\r\n        let errorAssets = vm.editEntityFormGroup.get(\r\n            'errorAssets').value.filter(e => e.checked == true);\r\n        let oldErrorAssets = vm.errorAssetsData.filter(e => e.checked == true);\r\n        let deleteErrorAssets = oldErrorAssets.filter(\r\n            o => !errorAssets.some(e => e.entityId.id == o.entityId.id));\r\n        let addErrorAssets = errorAssets.filter(e => !oldErrorAssets.some(err => err.entityId.id == e.entityId.id));\r\n        console.log(\"errorAssetsData: \", JSON.stringify(oldErrorAssets));\r\n        console.log(JSON.stringify(errorAssets));\r\n        console.log(\"deleteErrorAssets: \", deleteErrorAssets);\r\n        console.log(\"addErrorAssets: \", addErrorAssets);\r\n        let tasks = [];\r\n        if (addErrorAssets.length > 0) {\r\n            for (let i = 0; i < addErrorAssets.length; i++) {\r\n                let relation = {\r\n                    type: 'ASSET',\r\n                    typeGroup: 'COMMON',\r\n                    to: addErrorAssets[i].entityId,\r\n                    from: entityId\r\n                }\r\n                tasks.push(entityRelationService.saveRelation(relation));\r\n            }\r\n        }\r\n        if (deleteErrorAssets.length > 0) {\r\n            for (let i = 0; i < deleteErrorAssets.length; i++) {\r\n                let relation = {\r\n                    type: 'ASSET',\r\n                    typeGroup: 'COMMON',\r\n                    to: deleteErrorAssets[i].entityId,\r\n                    from: entityId\r\n                }\r\n                tasks.push(entityRelationService.deleteRelation(relation.from,\r\n                    relation.type, relation.to));\r\n            }\r\n        }\r\n\t\t//luu them vao attributeService\r\n\t\tlet attributesArray = [];\r\n\t\tif(addErrorAssets.length>0){\r\n\t\tattributesArray.push({\r\n                    key: \"relation_common_err\",\r\n                    value: addErrorAssets[0].entityId\r\n                });\r\n\t\tconsole.log(\"relation_common_err\",attributesArray)\r\n\t\tattributeService.saveEntityAttributes(\r\n                entityId, \"SERVER_SCOPE\",\r\n                attributesArray);\r\n\t\t}\r\n\r\n        if (tasks.length > 0) {\r\n            return widgetContext.rxjs.forkJoin(tasks);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n}\r\n\r\n/*========================================================================*/\r\n/*=========================  Add entity example  =========================*/\r\n/*========================================================================*/\r\n//\r\n//let $injector = widgetContext.$scope.$injector;\r\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\r\n//\r\n//openAddEntityDialog();\r\n//\r\n//function openAddEntityDialog() {\r\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n//}\r\n//\r\n//function AddEntityDialogController(instance) {\r\n//    let vm = instance;\r\n//\r\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\r\n//    vm.entitySearchDirection = {\r\n//        from: \"FROM\",\r\n//        to: \"TO\"\r\n//    }\r\n//\r\n//    vm.addEntityFormGroup = vm.fb.group({\r\n//      entityName: ['', [vm.validators.required]],\r\n//      entityType: ['DEVICE'],\r\n//      entityLabel: [null],\r\n//      type: ['', [vm.validators.required]],\r\n//      attributes: vm.fb.group({\r\n//          latitude: [null],\r\n//          longitude: [null],\r\n//          address: [null],\r\n//          owner: [null],\r\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\r\n//          booleanValue: [null]\r\n//      }),\r\n//      relations: vm.fb.array([])\r\n//    });\r\n//\r\n//    vm.cancel = function() {\r\n//        vm.dialogRef.close(null);\r\n//    };\r\n//\r\n//    vm.relations = function() {\r\n//        return vm.addEntityFormGroup.get('relations');\r\n//    };\r\n//\r\n//    vm.addRelation = function() {\r\n//        vm.relations().push(vm.fb.group({\r\n//          relatedEntity: [null, [vm.validators.required]],\r\n//          relationType: [null, [vm.validators.required]],\r\n//          direction: [null, [vm.validators.required]]\r\n//        }));\r\n//    };\r\n//\r\n//    vm.removeRelation = function(index) {\r\n//        vm.relations().removeAt(index);\r\n//        vm.relations().markAsDirty();\r\n//    };\r\n//\r\n//    vm.save = function() {\r\n//        vm.addEntityFormGroup.markAsPristine();\r\n//        saveEntityObservable().subscribe(\r\n//            function (entity) {\r\n//                widgetContext.rxjs.forkJoin([\r\n//                    saveAttributes(entity.id),\r\n//                    saveRelations(entity.id)\r\n//                ]).subscribe(\r\n//                    function () {\r\n//                        widgetContext.updateAliases();\r\n//                        vm.dialogRef.close(null);\r\n//                    }\r\n//                );\r\n//            }\r\n//        );\r\n//    };\r\n//\r\n//    function saveEntityObservable() {\r\n//        const formValues = vm.addEntityFormGroup.value;\r\n//        let entity = {\r\n//            name: formValues.entityName,\r\n//            type: formValues.type,\r\n//            label: formValues.entityLabel\r\n//        };\r\n//        if (formValues.entityType == 'ASSET') {\r\n//            return assetService.saveAsset(entity);\r\n//        } else if (formValues.entityType == 'DEVICE') {\r\n//            return deviceService.saveDevice(entity);\r\n//        }\r\n//    }\r\n//\r\n//    function saveAttributes(entityId) {\r\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\r\n//        let attributesArray = [];\r\n//        for (let key in attributes) {\r\n//            if(attributes[key] !== null) {\r\n//                attributesArray.push({key: key, value: attributes[key]});\r\n//            }\r\n//        }\r\n//        if (attributesArray.length > 0) {\r\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\r\n//        }\r\n//        return widgetContext.rxjs.of([]);\r\n//    }\r\n//\r\n//    function saveRelations(entityId) {\r\n//        let relations = vm.addEntityFormGroup.get('relations').value;\r\n//        let tasks = [];\r\n//        for(let i=0; i < relations.length; i++) {\r\n//            let relation = {\r\n//                type: relations[i].relationType,\r\n//                typeGroup: 'COMMON'\r\n//            };\r\n//            if (relations[i].direction == 'FROM') {\r\n//                relation.to = relations[i].relatedEntity;\r\n//                relation.from = entityId;\r\n//            } else {\r\n//                relation.to = entityId;\r\n//                relation.from = relations[i].relatedEntity;\r\n//            }\r\n//            tasks.push(entityRelationService.saveRelation(relation));\r\n//        }\r\n//        if (tasks.length > 0) {\r\n//            return widgetContext.rxjs.forkJoin(tasks);\r\n//        }\r\n//        return widgetContext.rxjs.of([]);\r\n//    }\r\n//}",
                "customResources": [],
                "id": "a3ab2b73-2f8b-3e7f-8be2-ace0a2820450"
              }
            ],
            "rowDoubleClick": [],
            "rowClick": []
          },
          "legendConfig": {
            "direction": "column",
            "position": "bottom",
            "sortDataKeys": false,
            "showMin": false,
            "showMax": false,
            "showAvg": false,
            "showTotal": false
          }
        },
        "row": 0,
        "col": 0,
        "id": "8c56a27c-1b10-ca11-4b84-f1a01c619baa"
      }
    },
    "states": {
      "default": {
        "name": "Quản lí HMI",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "8c56a27c-1b10-ca11-4b84-f1a01c619baa": {
                "sizeX": 24,
                "sizeY": 11,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "columns": 24,
              "margin": 10,
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "73b061c1-45b5-fd25-249b-f0991520ddea": {
        "id": "73b061c1-45b5-fd25-249b-f0991520ddea",
        "alias": "danh sach wo_line",
        "filter": {
          "type": "entityType",
          "resolveMultiple": true,
          "entityType": "ASSET"
        }
      }
    },
    "filters": {
      "4730fb09-7b6a-597e-5018-6727fe7112d4": {
        "id": "4730fb09-7b6a-597e-5018-6727fe7112d4",
        "filter": "error",
        "keyFilters": [
          {
            "key": {
              "type": "ENTITY_FIELD",
              "key": "type"
            },
            "valueType": "STRING",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "STARTS_WITH",
                  "value": {
                    "defaultValue": "error",
                    "dynamicValue": null
                  },
                  "ignoreCase": false,
                  "type": "STRING"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      },
      "54a43014-f7de-4025-c502-8553b234afd1": {
        "id": "54a43014-f7de-4025-c502-8553b234afd1",
        "filter": "error_hmi",
        "keyFilters": [
          {
            "key": {
              "type": "ENTITY_FIELD",
              "key": "type"
            },
            "valueType": "STRING",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "STARTS_WITH",
                  "value": {
                    "defaultValue": "error_hmi",
                    "dynamicValue": null
                  },
                  "ignoreCase": false,
                  "type": "STRING"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      }
    },
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1641787728235,
          "endTimeMs": 1641874128235
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true
    }
  },
  "name": "Quản lý lỗi HMI"
}